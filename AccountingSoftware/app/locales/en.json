{
  "messages": {
    "errors": {
      "database": {
        "connectionRefused": "Service unavailable. Please try again later.",
        "accessDenied": "Access denied. Please check your credentials.",
        "databaseNotFound": "Database not found. Please check your configuration.",
        "duplicateEntry": "Duplicate entry. Record already exists."
      },
      "general": {
        "internalServerError": "Internal Server Error: Failed to process the request."
      },
      "validation": {
        "requiredField": "Field is required.",
        "invalidFormat": "Invalid format.",
        "emptyContent": "Content cannot be empty!"
      },
      "authentication": {
        "invalidCredentials": "Invalid username or password"
      },
      "resource": {
        "notFound": "Resource not found."
      },
      "uom": {
        "notFound": "messages.errors.uom.notFound"
      }
    },
    "modules": {
      "uom": {
        "notFound": "UOM not found.",
        "internalServerError": "An error occurred while performing action on the UOM."
      },
      "uomfactor": {
        "notFound": "UOM factor not found.",
        "internalServerError": "An error occurred while performing action on the UOM factor."
      },
      "taxtype": {
        "notFound": "Tax type not found.",
        "internalServerError": "An error occurred while performing action on the tax type."
      },
      "taxgroup": {
        "notFound": "Tax group not found.",
        "internalServerError": "An error occurred while performing action on the tax group."
      },
      "contactaddresstype": {
        "notFound": "Contact address type not found.",
        "internalServerError": "An error occurred while performing action on the contact address type."
      },
      "contactdetail": {
        "notFound": "Contact detail type not found.",
        "internalServerError": "An error occurred while performing action on the contact detail.",
        "queryParamMissing": "Query parameter missing.",
        "queryParamNotSupported": "Query parameter not supported."
      },
      "addressdetail": {
        "notFound": "Address detail not found.",
        "internalServerError": "An error occurred while performing action on the address detail."
      },
      "locationdetail": {
        "notFound": "Location detail not found.",
        "internalServerError": "An error occurred while performing action on the location detail."
      },
      "mapprovider": {
        "notFound": "Map provider detail not found.",
        "internalServerError": "An error occurred while performing action on the map provider detail."
      },
      "mapproviderlocationmapper": {
        "notFound": "Map provider location mapper not found.",
        "internalServerError": "An error occurred while performing action on the map provider location mapper."
      },
      "taxgrouptaxtypemapper": {
        "notFound": "Tax group tax type mapper not found.",
        "internalServerError": "An error occurred while performing action on the Tax group tax type mapper.",
        "queryParamMissing": "Query parameter missing.",
        "queryParamNotSupported": "Query parameter not supported."
      },
      "costinfo": {
        "notFound": "Cost info not found.",
        "internalServerError": "An error occurred while performing action on Cost info.",
        "queryParamMissing": "Query parameter missing.",
        "queryParamNotSupported": "Query parameter not supported."
      },
      "categorydetail": {
        "notFound": "Category detail not found.",
        "internalServerError": "An error occurred while performing action on the Category detail."
      },
      "transactiontypeconfig": {
        "notFound": "Transaction type config not found.",
        "internalServerError": "An error occurred while performing action on the transaction type config."
      }
    },
    "logger": {
      "success": "Success",
      "error": "Error Code: {{code}}, Error: {{message}}",
      "recordFindById": "Record found for Id: {{id}}",
      "recordFindByQueryParam": "Record found for query parameter.",
      "recordNotFindById": "Record not found for Id: {{id}}",
      "errorFindById": "Error for Id: {{id}}, Error Code: {{code}}, Error: {{message}}",
      "successDeleteById": "Deleted record Id: {{id}}, affected Rows: {{affectedRows}}",
      "errorDeleteById": "Error for Id: {{id}}, Error Code: {{code}}, Error: {{message}}",
      "successCreatedById": "Successfully created with Id: {{id}}",
      "errorCreatedById": "Error while creating record for {{name}}, Error Code: {{code}}, Error: {{message}}",
      "successUpdatedById": "Successfully updated for Id: {{id}}",
      "errorUpdatedById": "Error for Id: {{id}}, Error code: {{code}}, Error: {{message}}",
      "errorSearchParam": "Error while fetching records by Param, Error Code: {{code}}, Error: {{message}}"
    },
    "success": {
      "fetchAll": "Successfully fetched all records.",
      "create": "Record created successfully.",
      "update": "Record updated successfully.",
      "delete": "Record deleted successfully."
    }
  }
}
